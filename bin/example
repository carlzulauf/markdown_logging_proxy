#!/usr/bin/env ruby

require "bundler/setup"
require "markdown_logging_proxy"

# Working usage examples that also generate an example log: tmp/example.log

# Let's imagine a process that harvests fruit from a fruit source
#  Somewhere in the complicated process our software is breaking.
#  We're going to wrap our fruit source in a proxy to see what's going on.

class AppleTree
  attr_reader :apples, :location

  def initialize(apples = 0, location = :field_1)
    @apples = apples
    @location = location
  end

  def pick
    return false if @apples == 0
    @apples -= 1
    true
  end

  def description
    "an apple tree"
  end

  def water
    percent_complete = 0
    while percent_complete < 1
      percent_complete = yield percent_complete
    end
    true
  end

  def groom
    :pruned
  end
end

class FruitPicker < Struct.new(:fruit_source)
  def harvest
    puts "Picked from #{fruit_source.description}" while fruit_source.pick
    # maybe the process is swallowing the error you're looking for
    fruit_source.fertilize(:organic) rescue nil
    fruit_source.water { |progress| progress + rand }
    fruit_source.adjust_vines if fruit_source.respond_to?(:adjust_vines)
    fruit_source.groom if fruit_source.respond_to?(:groom)
    puts "Completed harvest of #{fruit_source.description} in #{fruit_source.location}"
  end
end

log_path = "tmp/example.md"
File.unlink(log_path) if File.exist?(log_path)
io = File.open(log_path, "w")

# instead of sending the tree through the process, we'll wrap it in a proxy...
tree = AppleTree.new(2)
proxy = MarkdownLoggingProxy.new(
  tree,
  location: io,
  backtrace: true,
  proxy_response: [:location],
  overwrite: [:to_s],
)

# and tell the picker to harvest from the proxy
picker = FruitPicker.new(proxy)
picker.harvest
